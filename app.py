import streamlit as st
import requests
import PyPDF2
import json
import time
import openai

st.set_page_config(page_title="Agent IA pour appel √† projet", page_icon="üìÑ")

st.title("üìÑ Agent IA - R√©daction d'appel √† projet")
st.write("D√©posez un appel √† projet (PDF) et le profil de votre association (JSON). L'IA g√©n√®re une proposition adapt√©e.")

# Interface utilisateur
openai_api_key = st.text_input("üîë Cl√© API OpenAI", type="password")
uploaded_file = st.file_uploader("üìé Appel √† projet (PDF)", type="pdf")


# Lire un fichier PDF
def lire_pdf(fichier):
    lecteur = PyPDF2.PdfReader(fichier)
    texte = ""
    for page in lecteur.pages:
        texte += page.extract_text()
    return texte
    
# Chargement du profil associatif
try:
    with open("profil_association.json", "r", encoding="utf-8") as f:
        profil = json.load(f)
except FileNotFoundError:
    st.error("Fichier 'profil_association.json' manquant.")
    st.stop()

#briefing de l'ia
idee_projet = st.text_area(
    "üí¨ D√©brief / id√©e de projet souhait√©e",
    placeholder="Par exemple : un programme pour initier les jeunes filles au football dans les quartiers ruraux..."
)


# Appeler le mod√®le 
def interroger_modele_openai(prompt, openai_api_key):
    openai.api_key = openai_api_key

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # ou "gpt-4" si tu y as acc√®s
            messages=[
                {"role": "system", "content": "Tu es un assistant expert en appels √† projets associatifs."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1500,
        )
        return response["choices"][0]["message"]["content"]

    except Exception as e:
        return f"‚ùå Erreur OpenAI : {str(e)}"

# Nettoyer la r√©ponse IA pour n'afficher que le projet
def extraire_reponse(text):
    index = text.find("Titre du projet")
    if index != -1:
        return text[index:]
    return text

# Traitement principal
if uploaded_file and openai_api_key :
    texte_pdf = lire_pdf(uploaded_file)





    prompt = f"""
Tu es un assistant expert en r√©daction d'appels √† projets associatifs.

Voici un appel √† projet :
-------------------------
{texte_pdf}

Voici le profil de l'association :
-------------------------
{json.dumps(profil, indent=2)}


Voici l'id√©e de projet de l'association (optionnelle mais √† suivre si possible) :
-------------------------
{idee_projet}

Ta t√¢che : 
Propose une **r√©ponse structur√©e** √† cet appel √† projet au nom de l'association. Ne fais **aucune analyse**, ne donne pas d'avis, ne fais pas de r√©sum√©.

Contenu attendu :
- Titre du projet
- Objectifs du projet
- Public vis√©
- Activit√©s pr√©vues
- Partenaires √©ventuels
- Budget estim√© (si possible)
- R√©sultats attendus

R√©dige de fa√ßon professionnelle, claire et concise.
"""


    with st.spinner("‚úçÔ∏è G√©n√©ration de la r√©ponse..."):
        resultat = interroger_modele_openai(prompt, openai_api_key)
        st.subheader("üìÑ Proposition de projet g√©n√©r√©e")
        st.markdown(resultat)
